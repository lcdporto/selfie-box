#!/bin/bash
#------------
# selfieBox - deamon

verbose=true

# for how long the illumination light will
# stay turned of after a photo is taken
lightTime=30

# API URL, this will used in the selfieBox_uploadFile() function
API_URL=http://192.168.1.219/selfieboxapi/api/1/photos/
API_OK_MSG='{"version":"1.0","paging":{}}'

###          ----- do not edit past this point -----

# GPIO PINs definitions
button1=7
busyLED=0
readyLED=2
errorLED=3
lightPIN=4

# file in shared memmory to store the time the last photo was taken
IPCtimeOfLastPhoto="/dev/shm/"$(basename $0)$$"timeOfLastPhoto"

# interval (in seconds) for checking if it's time to turn off the light
lightCheckInterval=20

tmpStore=/tmp/selfieBox

# trap exit signals to do some cleanup before exit
trap "selfieBox_exit"  SIGINT SIGTERM

# trap to enable the servive to be signaled to take a picture
# the init.d script will signal this running daemon
# command: /etc/init.d/selfieBox capture
trap "selfieBox_takePicture" USR1


#======= < function definitions

# house cleaning, invoked when SIGINT or SIGTERM are received
selfieBox_exit() {
  say "Exiting...."

  # temporary directory is removed if empty
  rmdir $tmpStore 2> /dev/null

  # terminate all possible background processes
  kill -- -$$
  # have the function that handles the IPC file clear it
  lightOnTime clear

  # turn off LEDs
  gpio write ${readyLED} 0
  gpio write ${busyLED} 0
  gpio write ${errorLED} 0
  gpio write ${lightPIN} 0
  exit
}

# take picture, store in temporary directory and invoke background uploader
selfieBox_takePicture() {
  say "Capuring..."
  gpio write ${busyLED} 1
  light on
  raspistill -vf -hf  -n -o ${tmpStore}/$(date +"%Y%M%d-%H%M%S").jpg
  selfieBox_upload &
  say "Post capture, ready"
  gpio write ${busyLED} 0
}

#--- < Upload functions - start


# Start the background upload process if it's not already running
selfieBox_upload() {
  isRunning $UploadProcessID || {
    selfieBox_uploadFiles &
    UploadProcessID=$!
  }
}

# upload files in the $tmpStore directory
selfieBox_uploadFiles() {
  for FILE in $(ls ${tmpStore})
  do
    if [[ $(curl -s -F "path=@${tmpStore}/${FILE}" $API_URL) == $API_OK_MSG ]]
    then
      # all OK, unflag errorState and remove file from temporary storage
      errorState 0
      rm ${tmpStore}/${FILE}
    else
      # upload didn't return expected output, flag error state and exit
      errorState 1
      return 1
    fi
  done
}

errorState() {
  gpio write ${errorLED} $1
}

# returns true (0) if a process is running
isRunning() {
  kill -0 $1 > /dev/null 2>&1
  return $?
}
#--- /end - upload functions>

#--- < ilumination light management functions start

# check if it's time to turn off the light runs independently in a loop
lightCheck() {
  while true
  do
    sleep $lightCheckInterval
    if [[ $(lightOnTime) != "" ]]
    then
      if [[ $(date +%s) -gt $(( $(lightOnTime) + $lightTime )) ]]
      then
        say "turning off light"
        light off
      fi
    fi
  done
}

# set or read the lightOn time from the IPC file
lightOnTime() {
  case $1 in
    set )
      # record the tirrent time
      echo $(date +%s) > $IPCtimeOfLastPhoto
      ;;
    clear )
      # clear the file
      rm $IPCtimeOfLastPhoto 2> /dev/null
      ;;
    * )
      # echo the prevously recorded time
      [[ -r $IPCtimeOfLastPhoto ]] && cat $IPCtimeOfLastPhoto
      ;;
  esac
}

light() {
  case $1 in
    on)
      gpio write $lightPIN 1
      lightOnTime set
      ;;
    off)
      gpio write ${lightPIN} 0
      lightOnTime clear
      ;;
  esac
}

#--- / end ilumination light management functions >

#--- < general functions start

say() {
  [[ $verbose == true ]] && echo $1
}

#--- / end general functions >

#======= // function definitions >

# create the temporary directory if it doesn't exist
[[ -d ${tmpStore} ]] || mkdir ${tmpStore}

# start the the GPIO PINs
gpio mode ${button1} in
gpio mode ${busyLED} out
gpio mode ${readyLED} out
gpio mode ${errorLED} out
gpio mode ${lightPIN} out
gpio write ${busyLED} 0
gpio write ${readyLED} 1
gpio write ${errorLED} 0
gpio write ${lightPIN} 0

# start the light off time checker in a secondary loop
lightCheck &

# start the upload process of pending files from prevoius sessions
selfieBox_upload

say "starting loop"
while true
do
  if [[ $(gpio read ${button1}) -eq 0 ]]
  then
    selfieBox_takePicture
  fi
done
