#!/bin/bash
#------------
# selfieBox - deamon

# for how long the illumination light will
# stay turned of after a photo is taken
lightTime=30

# API URL, this will used in the selfieCam_uploadFile() function
API_URL=http://192.168.1.219/selfieboxapi/api/1/photos/
API_OK_MSG='{"version":"1.0","paging":{}}'

###          ----- do not edit past this point -----

# GPIO PINs definitions
button1=7
busyLED=0
readyLED=2
errorLED=3
lightPIN=4

# file in shared memmory to store the time the last photo was taken
IPCtimeOfLastPhoto="/dev/shm/"$(basename $0)$$"timeOfLastPhoto"

# interval (in seconds) for checking if it's time to turn off the light
lightCheckInterval=20

tmpStore=/tmp/selfieCam

# trap exit signals to do some cleanup before exit
trap "selfieBox_exit"  SIGINT SIGTERM

# trap to enable the servive to be signaled to take a picture
# the init.d script will signal this running daemon
# command: /etc/init.d/selfieBox capture
trap "selfieBox_takePicture" USR1


#======= < function definitions

# house cleaning, invoked when SIGINT or SIGTERM are received
selfieBox_exit() {
  echo "Exiting...."

  # temporary directory is removed if empty
  rmdir $tmpStore 2> /dev/null

  # terminate all possible background processes
  kill -- -$$
  # have the function that handles the IPC file clear it
  lightOnTime clear

  # turn off LEDs
  gpio write ${readyLED} 0
  gpio write ${busyLED} 0
  gpio write ${errorLED} 0
  gpio write ${lightPIN} 0
  exit
}

# take picture, store in temporary directory and invoke background uploader
selfieBox_takePicture() {
  echo "Capuring..."
  gpio write ${busyLED} 1
  lightOn
  raspistill -vf -hf  -n -o ${tmpStore}/$(date +"%Y%M%d-%H%M%S").jpg
  selfieCam_upload &
  echo "Ready"
  gpio write ${busyLED} 0
}

selfieCam_upload() {
  for file in $(ls ${tmpStore})
  do
    selfieCam_uploadFile ${tmpStore}/${file}
  done
}

# upload a single file to the server and check output
selfieCam_uploadFile() {
  FILE=$1
  if [[ $(curl -s -F "path=@${FILE}" $API_URL) == $API_OK_MSG ]]
  then
    # all OK, unflag errorState and remove file from temporary storage
    errorState 0
    rm ${FILE}
  else
    # upload didn't return expected output, flag error state
    errorState 1
  fi
}

errorState() {
  gpio write ${errorLED} $1
}

#--- < ilumination light management functions start

# turn on light and record time
lightOn() {
  gpio write $lightPIN 1
  lightOnTime set
}

# check if it's time to turn off the light runs independently in a loop
lightCheck() {
  while true
  do
    sleep $lightCheckInterval
    if [[ lightOnTime != "" ]]
    then
      if [[ $(date +%s) -gt $(( lightOnTime + $lightTime )) ]]
      then
        lightOff
      fi
    fi
  done
}

# turn of the light
lightOff(){
  gpio write ${lightPIN} 0
  lightOnTime clear
}

# set or read the lightOn time from the IPC file
#
# when called with a parameter (any one) it records the time
# else it echoes the prevously recorded time
lightOnTime() {
  case $1 in
    set )
      # record the tirrent time
      echo $(date +%s) > $IPCtimeOfLastPhoto
      ;;
    clear )
      # clear the file
      rm $IPCtimeOfLastPhoto
      ;;
    * )
      # echo the prevously recorded time
      [[ -r $IPCtimeOfLastPhoto ]] && cat $IPCtimeOfLastPhoto
      ;;
  esac
}

#--- / end ilumination light management functions >

#======= // function definitions >


[[ -d ${tmpStore} ]] || mkdir ${tmpStore}

gpio mode ${button1} in
gpio mode ${busyLED} out
gpio mode ${readyLED} out
gpio mode ${errorLED} out
gpio mode ${lightPIN} out
gpio write ${busyLED} 0
gpio write ${readyLED} 1
gpio write ${errorLED} 0
gpio write ${lightPIN} 0

# start the light off time checker in a secondary loop
lightCheck &

while true
do
  if [[ $(gpio read ${button1}) -eq 0 ]]
  then
    selfieBox_takePicture
  fi
done
